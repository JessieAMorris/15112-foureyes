import cv2
import numpy as np

import time
import math

class Struct(): pass
def getOpticalFlowInDirections(frame,distance=None,timestep=1,moveStep=10):
    gray=cv2.cvtColor(frame,cv2.cv.CV_BGR2GRAY)
    xsum,ysum=0,0
    xvel,yvel=0,0
    horizontalDistances=[]
    verticalDistances=[]
    if data.prevGray!=None:
        flow=cv2.calcOpticalFlowFarneback(data.prevGray, gray, pyr_scale=0.5, 
            levels=5, winsize=13, iterations=10, poly_n=5, poly_sigma=1.1, 
            flags=0) 
        for y in xrange(0,flow.shape[0],moveStep):
            horizontalDistanceRow=[]
            verticalDistanceRow=[]
            for x in xrange(0,flow.shape[1],moveStep):
                fx,fy=flow[y,x]
                xsum+=fx
                ysum+=fy
                horizontalDistanceRow.append(xsum)
                verticalDistanceRow.append(ysum)
        currTime=time.time()
        data.prevTime=currTime
    data.prevGray=gray
    return horizontalDistances,verticalDistances

def findDistance(currentDist,prevDist):
    if prevDist==None:
        return None

    else:
        distanceSum=0
        distanceCounter=0
        for i in xrange(len(currentDist)):
            for j in xrange(len(currentDist[0])):
                currDistance=(currentDist[i][j]-prevDist[i][j])
                if currDistance>2 or currDistance<-2:
                    distanceSum+=currDistance
                    distanceCounter+=1
    #return distanceSum/distanceCounter
                
def drawDot(frame):
    cv2.circle(frame,(data.x,data.y),1,(0,255,0),-1)
    cv2.imshow("hi",frame)

data=Struct()
cap=cv2.VideoCapture(0)
data.prevGray=None
width = int(cap.get(cv2.cv.CV_CAP_PROP_FRAME_WIDTH))
height = int(cap.get(cv2.cv.CV_CAP_PROP_FRAME_HEIGHT))
data.frameCounter=0
data.prevHorizontalDistances,data.prevVerticalDistances=None,None
data.x,data.y=200,200
while True:
    ret,frame=cap.read()
    data.frameCounter+=1
    data.horizontalDistances,data.verticalDistances=getOpticalFlowInDirections(frame)
    xMovement=findDistance(data.horizontalDistances,data.prevHorizontalDistances)
    yMovement=findDistance(data.verticalDistances,data.prevVerticalDistances)
    if xMovement!=None: data.x+=xMovement
    if yMovement!=None: data.y+=yMovement
    drawDot(frame)
    data.prevHorizontalDistances,data.prevVerticalDistances=data.horizontalDistances,data.verticalDistances

